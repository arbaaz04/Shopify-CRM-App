{"version":3,"sources":["/var/gadget/codegen/framework-1749762135066-dR5vRu/src/effects.ts"],"sourcesContent":["import type { AnyClient, InternalModelManager, RecordData } from \"@gadgetinc/api-client-core\";\nimport { ChangeTracking, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport { InternalError, InvalidStateTransitionError, NoSessionForAuthenticationError, UserNotSetOnSessionError } from \"./errors.js\";\nimport { Globals, actionContextLocalStorage } from \"./globals.js\";\nimport { frameworkVersion, modelListIndex, modelsMap } from \"./metadata.js\";\nimport type {\n  AnyActionContext,\n  AnyAmbientContext,\n  AnyEffectContext,\n  AnyGlobalActionContext,\n  AnyParams,\n  ModelMetadata,\n  NotYetTyped,\n} from \"./types.js\";\nimport { assert } from \"./utils.js\";\n\nexport function getBelongsToRelationParams(model: ModelMetadata, params: Record<string, any>): Record<string, any> {\n  const belongsToParams: Record<string, any> = {};\n\n  for (const field of Object.values(model.fields) as any[]) {\n    if (field.fieldType != \"BelongsTo\") continue;\n    const modelParams = typeof params[model.apiIdentifier] === \"object\" ? params[model.apiIdentifier] : undefined;\n    const belongsToParam =\n      modelParams && typeof modelParams[field.apiIdentifier] === \"object\" ? modelParams[field.apiIdentifier] : undefined;\n    const belongsToId = belongsToParam?.[LINK_PARAM] !== undefined ? belongsToParam[LINK_PARAM] : belongsToParam?.id;\n    if (belongsToId !== undefined) {\n      belongsToParams[`${field.apiIdentifier}Id`] = belongsToId;\n    }\n  }\n\n  return belongsToParams;\n}\n\nexport function createGadgetRecord<Shape>(apiIdentifier: string, data: Shape): GadgetRecord<Shape & { __typename: string }> {\n  const model = getModelByApiIdentifier(apiIdentifier);\n  return new GadgetRecord({\n    ...data,\n    __typename: model.graphqlTypeName,\n  });\n}\n\n/**\n * Applies incoming API params (your modelâ€™s fields) to a record\n *\n * @param params - data passed from API calls, webhook events, or direct user inputs.\n * @param record - object used to pass params to\n */\nexport function applyParams(params: AnyParams, record: GadgetRecord<any>): void {\n  const model = getModelByTypename(record.__typename);\n  Object.assign(record, params[model.apiIdentifier], getBelongsToRelationParams(model, params));\n}\n\n/**\n * Get the internal model manager for the model from its maybe-namespaced spot\n */\nexport const internalModelManagerForModel = (api: AnyClient, apiIdentifier: string, namespace: string[]): InternalModelManager => {\n  const modelPath = [...namespace, apiIdentifier];\n  const manager: InternalModelManager | undefined = Globals.platformModules.lodash().get(api, [\"internal\", ...modelPath]);\n  if (!manager) {\n    throw new InternalError(\n      `Gadget needs but can't find an internal model manager for ${modelPath.join(\n        \".\"\n      )} on the API client -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  return manager;\n};\n\n/**\n * Get the internal model manager for the model from its maybe-namespaced spot\n */\nexport const internalModelManagerForTypename = (api: AnyClient, typename: string): InternalModelManager => {\n  const model = getModelByTypename(typename);\n\n  return internalModelManagerForModel(api, model.apiIdentifier, model.namespace);\n};\n\n/**\n * Saves record to the database:\n * 1. Checks field validations of a given record, then saves the record to the database.\n * 2. Uses your apps Internal API to persist data. This API quickly interacts with data without running any business logic.\n *\n * @param record - object saved to the database\n */\nexport async function save(record: GadgetRecord<any>): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const model = getModelByTypename(record.__typename);\n\n  await (await Globals.modelValidator(model.key)).validate({ api, logger: Globals.logger }, record);\n\n  const internalModelManager = internalModelManagerForTypename(api, record.__typename);\n\n  let result: GadgetRecord<any>;\n\n  if (\"createdAt\" in record && record.createdAt) {\n    result = await internalModelManager.update(record.id, {\n      [model.apiIdentifier]: changedAttributes(model, record),\n    });\n  } else {\n    result = await internalModelManager.create({\n      [model.apiIdentifier]: writableAttributes(model, record),\n    });\n  }\n\n  Object.assign(record, { ...result });\n  record.flushChanges(ChangeTracking.SinceLastPersisted);\n}\n\n/**\n * Deletes record from the database.\n *\n * @param record - object deleted from the database\n */\nexport async function deleteRecord(record: GadgetRecord<any>): Promise<void> {\n  const context = maybeGetActionContextFromLocalStorage();\n\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const scope = context ? context.scope : {};\n\n  const id = assert(record.id, `record.id not set on record in scope, has the record been persisted?`);\n\n  const internalModelManager = internalModelManagerForTypename(api, record.__typename);\n  await internalModelManager.delete(id);\n\n  scope.recordDeleted = true;\n}\n\nexport function transitionState(\n  record: GadgetRecord<any>,\n  transition: {\n    from?: string | Record<string, string>;\n    to: string | Record<string, string>;\n  }\n): void {\n  const model = getModelByTypename(record.__typename);\n  const isShopifyModel =\n    model.apiIdentifier === \"shopifyShop\" || model.apiIdentifier === \"shopifySync\" || model.apiIdentifier === \"shopifyBulkOperation\";\n\n  if (isShopifyModel && doesVersionSupportSourceControl()) {\n    // In apps framework version 1.0.0+, we handle the state transition internally to Shopify models based on the above API identifiers.\n    // This function becomes a no-op for those models.\n    return;\n  }\n\n  const stringRecordState = typeof record.state === \"string\" ? record.state : JSON.stringify(record.state);\n  const stringTransitionFrom = typeof transition.from === \"string\" ? transition.from : JSON.stringify(transition.from);\n\n  if (transition.from && stringRecordState !== stringTransitionFrom) {\n    throw new InvalidStateTransitionError(undefined, {\n      state: record.state,\n      expectedFrom: transition.from,\n    });\n  }\n\n  record.state = transition.to;\n}\n\nexport function legacySetUser(): void {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.scope.authenticatedUser) {\n    throw new UserNotSetOnSessionError(\n      \"The authenticated user could not be saved to the session when logging in. Make sure the user has a role assigned to them.\"\n    );\n  }\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\n      \"Unable to authenticate because the request was made with no session in context to transition.\"\n    );\n  }\n  context.session.set(\"user\", { [LINK_PARAM]: context.scope.authenticatedUser.id });\n}\n\nexport function legacyUnsetUser(): void {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\"Unable to unset users on session because the request was made with no session.\");\n  }\n  context.session.delete(\"user\");\n}\n\nexport async function legacySuccessfulAuthentication(params: AnyParams): Promise<void> {\n  const context = getActionContextFromLocalStorage();\n  const { api, scope } = context;\n  const manager = api.internal.user as InternalModelManager;\n\n  const user = (await manager.findMany({ filter: { email: { equals: params.email } } }))[0];\n  let result = false;\n  if (user && params.password && user.password?.hash) {\n    if (await Globals.platformModules.bcrypt().compare(params.password, user.password.hash)) {\n      scope.authenticatedUser = user;\n      result = true;\n    }\n  }\n  Globals.logger.info({ email: params.email, userId: user?.id, result }, \"login attempt\");\n\n  if (!result) {\n    throw new Error(\"Invalid email or password\");\n  }\n}\n\n/**\n * @private helper functions and variables\n */\n\nexport function doesVersionSupportSourceControl(): boolean {\n  return Globals.platformModules.compareVersions().satisfies(frameworkVersion, \">=1.0.0\");\n}\n\n/**\n * @private Get action context without `params` and `record` from async local storage.\n */\nexport function getActionContextFromLocalStorage(): AnyActionContext | AnyGlobalActionContext | AnyEffectContext {\n  return assert(actionContextLocalStorage.getStore(), \"this effect function should only be called from within an action\");\n}\n\n/**\n * @private Similar to `getActionContextFromLocalStorage` but returns `undefined` if there is no action context. (i.e. possibly called from a route)\n */\nexport function maybeGetActionContextFromLocalStorage(): AnyActionContext | AnyGlobalActionContext | AnyEffectContext | undefined {\n  return actionContextLocalStorage.getStore();\n}\n\nexport function getCurrentContext(): AnyAmbientContext {\n  return assert(Globals.requestContext.get(\"requestContext\"), \"no gadget context found on request\");\n}\n\nexport const LINK_PARAM = \"_link\";\n\nexport function writableAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>): Record<string, any> {\n  const fieldsByApiIdentifier = Globals.platformModules.lodash().keyBy(Object.values(model.fields) as NotYetTyped[], \"apiIdentifier\");\n  return Globals.platformModules.lodash().pickBy(record, (v: any, k: any) => {\n    const field = fieldsByApiIdentifier[k];\n    if (!field) return false;\n\n    const isRelationshipField =\n      field.fieldType === FieldType.HasMany || field.fieldType === FieldType.HasOne || field.fieldType === FieldType.HasManyThrough;\n\n    if (isRelationshipField && v === null) {\n      return false;\n    }\n\n    return field.internalWritable;\n  });\n}\n\nexport function changedAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>): Record<string, any> {\n  const changes = record.changes();\n  const attributes = Object.keys(changes).reduce((attrs, key) => {\n    attrs[key] = record[key];\n    return attrs;\n  }, {} as any);\n  return writableAttributes(model, attributes);\n}\n\nexport const getModelByApiIdentifier = (apiIdentifier: string): ModelMetadata => {\n  const typename = modelListIndex[`api:${apiIdentifier}`];\n  if (!typename) {\n    throw new InternalError(`Model ${apiIdentifier} not found in available model metadata`, {\n      availableApiIdentifiers: Object.keys(modelListIndex),\n    });\n  }\n\n  return getModelByTypename(typename);\n};\n\nexport const getModelByTypename = (typename: string): ModelMetadata => {\n  if (!typename) {\n    throw new InternalError(`No typename found on record, __typename must be set for accessing model metadata`);\n  }\n\n  const model = modelsMap[typename];\n  if (!model) {\n    throw new InternalError(`Model with typename ${typename} not found in available model metadata`, {\n      availableTypenames: Object.keys(modelsMap),\n    });\n  }\n\n  return model;\n};\n\nexport enum FieldType {\n  ID = \"ID\",\n  Number = \"Number\",\n  String = \"String\",\n  Enum = \"Enum\",\n  RichText = \"RichText\",\n  DateTime = \"DateTime\",\n  Email = \"Email\",\n  URL = \"URL\",\n  Money = \"Money\",\n  File = \"File\",\n  Color = \"Color\",\n  Password = \"Password\",\n  Computed = \"Computed\",\n  HasManyThrough = \"HasManyThrough\",\n  BelongsTo = \"BelongsTo\",\n  HasMany = \"HasMany\",\n  HasOne = \"HasOne\",\n  Boolean = \"Boolean\",\n  Model = \"Model\",\n  Object = \"Object\",\n  Array = \"Array\",\n  JSON = \"JSON\",\n  Code = \"Code\",\n  EncryptedString = \"EncryptedString\",\n  Vector = \"Vector\",\n  /**\n   * Any value at all.\n   * Prefer FieldType.JSON where possible, it's more descriptive.\n   */\n  Any = \"Any\",\n  Null = \"Null\",\n  RecordState = \"RecordState\",\n  RoleAssignments = \"RoleAssignments\",\n}\n"],"names":["ChangeTracking","GadgetRecord","InternalError","InvalidStateTransitionError","NoSessionForAuthenticationError","UserNotSetOnSessionError","Globals","actionContextLocalStorage","frameworkVersion","modelListIndex","modelsMap","assert","getBelongsToRelationParams","model","params","belongsToParams","field","Object","values","fields","fieldType","modelParams","apiIdentifier","undefined","belongsToParam","belongsToId","LINK_PARAM","id","createGadgetRecord","data","getModelByApiIdentifier","__typename","graphqlTypeName","applyParams","record","getModelByTypename","assign","internalModelManagerForModel","api","namespace","modelPath","manager","platformModules","lodash","get","join","internalModelManagerForTypename","typename","save","context","maybeGetActionContextFromLocalStorage","getCurrentContext","modelValidator","key","validate","logger","internalModelManager","result","createdAt","update","changedAttributes","create","writableAttributes","flushChanges","SinceLastPersisted","deleteRecord","scope","delete","recordDeleted","transitionState","transition","isShopifyModel","doesVersionSupportSourceControl","stringRecordState","state","JSON","stringify","stringTransitionFrom","from","expectedFrom","to","legacySetUser","getActionContextFromLocalStorage","authenticatedUser","session","set","legacyUnsetUser","legacySuccessfulAuthentication","internal","user","findMany","filter","email","equals","password","hash","bcrypt","compare","info","userId","Error","compareVersions","satisfies","getStore","requestContext","fieldsByApiIdentifier","keyBy","pickBy","v","k","isRelationshipField","internalWritable","changes","attributes","keys","reduce","attrs","availableApiIdentifiers","availableTypenames","FieldType"],"mappings":"AACA,SAASA,cAAc,EAAEC,YAAY,QAAQ,6BAA6B;AAC1E,SAASC,aAAa,EAAEC,2BAA2B,EAAEC,+BAA+B,EAAEC,wBAAwB,QAAQ,cAAc;AACpI,SAASC,OAAO,EAAEC,yBAAyB,QAAQ,eAAe;AAClE,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,SAAS,QAAQ,gBAAgB;AAU5E,SAASC,MAAM,QAAQ,aAAa;AAEpC,OAAO,SAASC,2BAA2BC,KAAoB,EAAEC,MAA2B;IAC1F,MAAMC,kBAAuC,CAAC;IAE9C,KAAK,MAAMC,SAASC,OAAOC,MAAM,CAACL,MAAMM,MAAM,EAAY;QACxD,IAAIH,MAAMI,SAAS,IAAI,aAAa;QACpC,MAAMC,cAAc,OAAOP,MAAM,CAACD,MAAMS,aAAa,CAAC,KAAK,WAAWR,MAAM,CAACD,MAAMS,aAAa,CAAC,GAAGC;QACpG,MAAMC,iBACJH,eAAe,OAAOA,WAAW,CAACL,MAAMM,aAAa,CAAC,KAAK,WAAWD,WAAW,CAACL,MAAMM,aAAa,CAAC,GAAGC;QAC3G,MAAME,cAAcD,gBAAgB,CAACE,WAAW,KAAKH,YAAYC,cAAc,CAACE,WAAW,GAAGF,gBAAgBG;QAC9G,IAAIF,gBAAgBF,WAAW;YAC7BR,eAAe,CAAC,GAAGC,MAAMM,aAAa,CAAC,EAAE,CAAC,CAAC,GAAGG;QAChD;IACF;IAEA,OAAOV;AACT;AAEA,OAAO,SAASa,mBAA0BN,aAAqB,EAAEO,IAAW;IAC1E,MAAMhB,QAAQiB,wBAAwBR;IACtC,OAAO,IAAIrB,aAAa;QACtB,GAAG4B,IAAI;QACPE,YAAYlB,MAAMmB,eAAe;IACnC;AACF;AAEA;;;;;CAKC,GACD,OAAO,SAASC,YAAYnB,MAAiB,EAAEoB,MAAyB;IACtE,MAAMrB,QAAQsB,mBAAmBD,OAAOH,UAAU;IAClDd,OAAOmB,MAAM,CAACF,QAAQpB,MAAM,CAACD,MAAMS,aAAa,CAAC,EAAEV,2BAA2BC,OAAOC;AACvF;AAEA;;CAEC,GACD,OAAO,MAAMuB,+BAA+B,CAACC,KAAgBhB,eAAuBiB;IAClF,MAAMC,YAAY;WAAID;QAAWjB;KAAc;IAC/C,MAAMmB,UAA4CnC,QAAQoC,eAAe,CAACC,MAAM,GAAGC,GAAG,CAACN,KAAK;QAAC;WAAeE;KAAU;IACtH,IAAI,CAACC,SAAS;QACZ,MAAM,IAAIvC,cACR,CAAC,0DAA0D,EAAEsC,UAAUK,IAAI,CACzE,KACA,8EAA8E,CAAC;IAErF;IAEA,OAAOJ;AACT,EAAE;AAEF;;CAEC,GACD,OAAO,MAAMK,kCAAkC,CAACR,KAAgBS;IAC9D,MAAMlC,QAAQsB,mBAAmBY;IAEjC,OAAOV,6BAA6BC,KAAKzB,MAAMS,aAAa,EAAET,MAAM0B,SAAS;AAC/E,EAAE;AAEF;;;;;;CAMC,GACD,OAAO,eAAeS,KAAKd,MAAyB;IAClD,MAAMe,UAAUC;IAChB,MAAMZ,MAAM3B,OAAOsC,UAAUA,QAAQX,GAAG,GAAGa,oBAAoBb,GAAG,EAAE;IACpE,MAAMzB,QAAQsB,mBAAmBD,OAAOH,UAAU;IAElD,MAAM,AAAC,CAAA,MAAMzB,QAAQ8C,cAAc,CAACvC,MAAMwC,GAAG,CAAA,EAAGC,QAAQ,CAAC;QAAEhB;QAAKiB,QAAQjD,QAAQiD,MAAM;IAAC,GAAGrB;IAE1F,MAAMsB,uBAAuBV,gCAAgCR,KAAKJ,OAAOH,UAAU;IAEnF,IAAI0B;IAEJ,IAAI,eAAevB,UAAUA,OAAOwB,SAAS,EAAE;QAC7CD,SAAS,MAAMD,qBAAqBG,MAAM,CAACzB,OAAOP,EAAE,EAAE;YACpD,CAACd,MAAMS,aAAa,CAAC,EAAEsC,kBAAkB/C,OAAOqB;QAClD;IACF,OAAO;QACLuB,SAAS,MAAMD,qBAAqBK,MAAM,CAAC;YACzC,CAAChD,MAAMS,aAAa,CAAC,EAAEwC,mBAAmBjD,OAAOqB;QACnD;IACF;IAEAjB,OAAOmB,MAAM,CAACF,QAAQ;QAAE,GAAGuB,MAAM;IAAC;IAClCvB,OAAO6B,YAAY,CAAC/D,eAAegE,kBAAkB;AACvD;AAEA;;;;CAIC,GACD,OAAO,eAAeC,aAAa/B,MAAyB;IAC1D,MAAMe,UAAUC;IAEhB,MAAMZ,MAAM3B,OAAOsC,UAAUA,QAAQX,GAAG,GAAGa,oBAAoBb,GAAG,EAAE;IACpE,MAAM4B,QAAQjB,UAAUA,QAAQiB,KAAK,GAAG,CAAC;IAEzC,MAAMvC,KAAKhB,OAAOuB,OAAOP,EAAE,EAAE,CAAC,oEAAoE,CAAC;IAEnG,MAAM6B,uBAAuBV,gCAAgCR,KAAKJ,OAAOH,UAAU;IACnF,MAAMyB,qBAAqBW,MAAM,CAACxC;IAElCuC,MAAME,aAAa,GAAG;AACxB;AAEA,OAAO,SAASC,gBACdnC,MAAyB,EACzBoC,UAGC;IAED,MAAMzD,QAAQsB,mBAAmBD,OAAOH,UAAU;IAClD,MAAMwC,iBACJ1D,MAAMS,aAAa,KAAK,iBAAiBT,MAAMS,aAAa,KAAK,iBAAiBT,MAAMS,aAAa,KAAK;IAE5G,IAAIiD,kBAAkBC,mCAAmC;QACvD,oIAAoI;QACpI,kDAAkD;QAClD;IACF;IAEA,MAAMC,oBAAoB,OAAOvC,OAAOwC,KAAK,KAAK,WAAWxC,OAAOwC,KAAK,GAAGC,KAAKC,SAAS,CAAC1C,OAAOwC,KAAK;IACvG,MAAMG,uBAAuB,OAAOP,WAAWQ,IAAI,KAAK,WAAWR,WAAWQ,IAAI,GAAGH,KAAKC,SAAS,CAACN,WAAWQ,IAAI;IAEnH,IAAIR,WAAWQ,IAAI,IAAIL,sBAAsBI,sBAAsB;QACjE,MAAM,IAAI1E,4BAA4BoB,WAAW;YAC/CmD,OAAOxC,OAAOwC,KAAK;YACnBK,cAAcT,WAAWQ,IAAI;QAC/B;IACF;IAEA5C,OAAOwC,KAAK,GAAGJ,WAAWU,EAAE;AAC9B;AAEA,OAAO,SAASC;IACd,MAAMhC,UAAUiC;IAEhB,IAAI,CAACjC,QAAQiB,KAAK,CAACiB,iBAAiB,EAAE;QACpC,MAAM,IAAI9E,yBACR;IAEJ;IACA,IAAI,CAAC4C,QAAQmC,OAAO,EAAE;QACpB,MAAM,IAAIhF,gCACR;IAEJ;IACA6C,QAAQmC,OAAO,CAACC,GAAG,CAAC,QAAQ;QAAE,CAAC3D,WAAW,EAAEuB,QAAQiB,KAAK,CAACiB,iBAAiB,CAACxD,EAAE;IAAC;AACjF;AAEA,OAAO,SAAS2D;IACd,MAAMrC,UAAUiC;IAEhB,IAAI,CAACjC,QAAQmC,OAAO,EAAE;QACpB,MAAM,IAAIhF,gCAAgC;IAC5C;IACA6C,QAAQmC,OAAO,CAACjB,MAAM,CAAC;AACzB;AAEA,OAAO,eAAeoB,+BAA+BzE,MAAiB;IACpE,MAAMmC,UAAUiC;IAChB,MAAM,EAAE5C,GAAG,EAAE4B,KAAK,EAAE,GAAGjB;IACvB,MAAMR,UAAUH,IAAIkD,QAAQ,CAACC,IAAI;IAEjC,MAAMA,OAAO,AAAC,CAAA,MAAMhD,QAAQiD,QAAQ,CAAC;QAAEC,QAAQ;YAAEC,OAAO;gBAAEC,QAAQ/E,OAAO8E,KAAK;YAAC;QAAE;IAAE,EAAC,CAAE,CAAC,EAAE;IACzF,IAAInC,SAAS;IACb,IAAIgC,QAAQ3E,OAAOgF,QAAQ,IAAIL,KAAKK,QAAQ,EAAEC,MAAM;QAClD,IAAI,MAAMzF,QAAQoC,eAAe,CAACsD,MAAM,GAAGC,OAAO,CAACnF,OAAOgF,QAAQ,EAAEL,KAAKK,QAAQ,CAACC,IAAI,GAAG;YACvF7B,MAAMiB,iBAAiB,GAAGM;YAC1BhC,SAAS;QACX;IACF;IACAnD,QAAQiD,MAAM,CAAC2C,IAAI,CAAC;QAAEN,OAAO9E,OAAO8E,KAAK;QAAEO,QAAQV,MAAM9D;QAAI8B;IAAO,GAAG;IAEvE,IAAI,CAACA,QAAQ;QACX,MAAM,IAAI2C,MAAM;IAClB;AACF;AAEA;;CAEC,GAED,OAAO,SAAS5B;IACd,OAAOlE,QAAQoC,eAAe,CAAC2D,eAAe,GAAGC,SAAS,CAAC9F,kBAAkB;AAC/E;AAEA;;CAEC,GACD,OAAO,SAAS0E;IACd,OAAOvE,OAAOJ,0BAA0BgG,QAAQ,IAAI;AACtD;AAEA;;CAEC,GACD,OAAO,SAASrD;IACd,OAAO3C,0BAA0BgG,QAAQ;AAC3C;AAEA,OAAO,SAASpD;IACd,OAAOxC,OAAOL,QAAQkG,cAAc,CAAC5D,GAAG,CAAC,mBAAmB;AAC9D;AAEA,OAAO,MAAMlB,aAAa,QAAQ;AAElC,OAAO,SAASoC,mBAAmBjD,KAAoB,EAAEqB,MAAgC;IACvF,MAAMuE,wBAAwBnG,QAAQoC,eAAe,CAACC,MAAM,GAAG+D,KAAK,CAACzF,OAAOC,MAAM,CAACL,MAAMM,MAAM,GAAoB;IACnH,OAAOb,QAAQoC,eAAe,CAACC,MAAM,GAAGgE,MAAM,CAACzE,QAAQ,CAAC0E,GAAQC;QAC9D,MAAM7F,QAAQyF,qBAAqB,CAACI,EAAE;QACtC,IAAI,CAAC7F,OAAO,OAAO;QAEnB,MAAM8F,sBACJ9F,MAAMI,SAAS,kBAA0BJ,MAAMI,SAAS,iBAAyBJ,MAAMI,SAAS;QAElG,IAAI0F,uBAAuBF,MAAM,MAAM;YACrC,OAAO;QACT;QAEA,OAAO5F,MAAM+F,gBAAgB;IAC/B;AACF;AAEA,OAAO,SAASnD,kBAAkB/C,KAAoB,EAAEqB,MAAgC;IACtF,MAAM8E,UAAU9E,OAAO8E,OAAO;IAC9B,MAAMC,aAAahG,OAAOiG,IAAI,CAACF,SAASG,MAAM,CAAC,CAACC,OAAO/D;QACrD+D,KAAK,CAAC/D,IAAI,GAAGnB,MAAM,CAACmB,IAAI;QACxB,OAAO+D;IACT,GAAG,CAAC;IACJ,OAAOtD,mBAAmBjD,OAAOoG;AACnC;AAEA,OAAO,MAAMnF,0BAA0B,CAACR;IACtC,MAAMyB,WAAWtC,cAAc,CAAC,CAAC,IAAI,EAAEa,eAAe,CAAC;IACvD,IAAI,CAACyB,UAAU;QACb,MAAM,IAAI7C,cAAc,CAAC,MAAM,EAAEoB,cAAc,sCAAsC,CAAC,EAAE;YACtF+F,yBAAyBpG,OAAOiG,IAAI,CAACzG;QACvC;IACF;IAEA,OAAO0B,mBAAmBY;AAC5B,EAAE;AAEF,OAAO,MAAMZ,qBAAqB,CAACY;IACjC,IAAI,CAACA,UAAU;QACb,MAAM,IAAI7C,cAAc,CAAC,gFAAgF,CAAC;IAC5G;IAEA,MAAMW,QAAQH,SAAS,CAACqC,SAAS;IACjC,IAAI,CAAClC,OAAO;QACV,MAAM,IAAIX,cAAc,CAAC,oBAAoB,EAAE6C,SAAS,sCAAsC,CAAC,EAAE;YAC/FuE,oBAAoBrG,OAAOiG,IAAI,CAACxG;QAClC;IACF;IAEA,OAAOG;AACT,EAAE;AAEF,OAAO,IAAA,AAAK0G,mCAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BV;;;GAGC;;;;WA7BSA;MAkCX"}